{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varient","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","classsName","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","CoronImage","alt","Name","Chart","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91d154a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__GKSA_\",\"card\":\"Cards_card__ujEoL\",\"infected\":\"Cards_infected__21J_M\",\"recovered\":\"Cards_recovered__2d4__\",\"deaths\":\"Cards_deaths__2hbbB\",\"image\":\"Cards_image__3z7oR\"};","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nimport styles from './Cards.module.css'\r\n\r\n\r\nconst Cards=({data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\nif(!confirmed){\r\n   return 'loading..'\r\n}  \r\nreturn (\r\n    <div className={styles.container}>\r\n        <Grid container spacing={3} justify='center'>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography varient =\"h5\">\r\n                        <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography varient=\"body2\" gutterBottom>Number of active cases of COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography varient =\"h5\">\r\n                        <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography varient=\"body2\" gutterBottom>Number of recoveries from COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography varient =\"h5\">\r\n                        <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography varient=\"body2\" gutterBottom>Number of deaths caused by COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n)\r\n}\r\nexport default Cards;","import axios from 'axios'\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async(country) =>{\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try {\r\n    // ---------------------first method--------------------   \r\n    //    const  response = await axios.get(url)  \r\n    //    return response\r\n    // ---------------------Second method--------------------\r\n        const {data :{confirmed,recovered,deaths,lastUpdate}}= await axios.get(changeableUrl)\r\n        return  {confirmed,recovered,deaths,lastUpdate};\r\n    \r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nexport const  fetchDailyData = async()=>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        \r\n        const   modifiedData = data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nexport  const fetchCountries = async()=>{\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n        return countries.map((country)=>country.name)\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React from 'react'\r\nimport {useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api'\r\nimport {Line, Bar} from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\n\r\nconst Charts=({data:{confirmed,recovered,deaths},country})=>{\r\n    const[dailyData,setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n       const fetchApi = async()=>{\r\n        setDailyData(await fetchDailyData());\r\n       }\r\n       console.log('chartdata',dailyData)\r\n       fetchApi()\r\n    },[]);\r\n\r\n    const lineChart =(\r\n        dailyData.length\r\n        ?(\r\n        <Line\r\n        data={{\r\n            labels:dailyData.map(({date})=>date),\r\n            datasets:[{\r\n              data:dailyData.map(({confirmed})=>confirmed),      \r\n              label:'Infected',\r\n              borderColor:'3333ff',\r\n              fill: true\r\n            },{\r\n                data:dailyData.map(({deaths})=>deaths),      \r\n                label:'Deaths',\r\n                borderColor:'red',\r\n                backgroundColor:'rgba(255,0,0,0.5)',\r\n                fill: true\r\n            }\r\n        ], \r\n        }}\r\n        \r\n        />):null\r\n    )\r\n    console.log(confirmed,recovered, deaths)\r\nconst barChart=(\r\n    confirmed \r\n    ?(\r\n    <Bar\r\n    data={{\r\n        labels:['Infected','Recovered','Deaths'],\r\n        datasets:[{\r\n            label:\"People\",\r\n            backgroundColor:[\r\n                'rgb(0,0,255,0.5)',\r\n                'rgb(0,255,0,0.5)',\r\n                'rgb(255,0,0,0.5)',\r\n            ],\r\n            data:[confirmed.value,recovered.value,deaths.value]\r\n        }]\r\n    }}\r\n    options={{\r\n        legend:{display:false},\r\n        title:{display:true,text:`Current state in ${country}`}\r\n    }}\r\n    />\r\n    ):null\r\n\r\n)\r\nreturn (\r\n        <div className={styles.container}>\r\n            {country ? barChart: lineChart}\r\n        </div>\r\n)\r\n}\r\nexport default Charts;","import React,{useState,useEffect} from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css'\r\nimport {fetchCountries} from '../../api'\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const[fetchedCountries,setFetchedCountries] =useState([]);\r\n    useEffect(() => {\r\n        const fetchApi = async ()=>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchApi();\r\n    },[setFetchedCountries])\r\n    // console.log('fatcheing',fetchedCountries)\r\nreturn (\r\n    <FormControl classsName={styles.formControl}>\r\n        <NativeSelect defaultValue=\"\"  onChange={(e)=>handleCountryChange(e.target.value)}>\r\n            <option value=\"\">Global</option>\r\n{fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n        </NativeSelect>\r\n    </FormControl>\r\n)\r\n}\r\nexport default CountryPicker;","import React, { Component } from 'react'\nimport {Cards,Chart,CountryPicker} from './components'\nimport styles from './App.module.css'\nimport {fetchData} from './api'\nimport CoronImage from './images/image.png'\n\nexport default class App extends Component {\n  state={\n    data:{},\n    country:''\n  }\n   \nasync componentDidMount(){\n  const fetchedData = await fetchData()\n  this.setState({data:fetchedData})\n\n}\nhandleCountryChange=async(country)=>{\n  const fetchedData = await fetchData(country)\n  this.setState({\n    data:fetchedData,\n    country:country\n  })\nconsole.log('abc',fetchedData)\n}\n  render() {\n    const {data,country}= this.state\n\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={CoronImage} alt='Covid-19'/>\n        <div className={styles.Name}>Powered By: Amitesh Gupta</div>\n          <Cards data={data}/>\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\n          <Chart data={data} country={country}/>\n          \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__39bGR\",\"image\":\"App_image__ZYzK4\",\"Name\":\"App_Name__1_wGX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1DB_0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1Gqcu\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}